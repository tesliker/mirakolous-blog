webpackJsonp([0x6f5896d2aeb6],{505:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Mirakolous.blog",author:"Tommy Sliker"}},markdownRemark:{id:"/Users/tesliker/Work/mirakolous-blog/src/pages/first-blog-gatsbyjs/index.md absPath of file >>> MarkdownRemark",html:'<p>Ok, so I have been pondering making a blog for some time. I have long thought that I should be documenting\nthe issues I face daily and how I resolve them. Mostly because I will likely face the same issues again, and my\nsolutions may prove useful to other.</p>\n<p>The reason I am <em>actually</em> going through with this is because I\nwanted to mess around with gatsby.js, which is a react based static site generator.</p>\n<p>I will just give a short walk through as to what I did to get this site up and running.</p>\n<ol>\n<li>Install the gatsby CLI <code>npm install --global gatsby-cli</code></li>\n<li>Use the CLI to generate a new site from existing repo\n<code>gatsby new mirakolous-blog https://github.com/gatsbyjs/gatsby-starter-blog</code></li>\n<li>Replace the metadata, blog posts with actual data</li>\n</ol>\n<p>BOOM!</p>\n<p>Not hard, right? But I wanted to take it a step further</p>\n<p>I wanted syntax highlighting for my code example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunct</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Is this highlighted?\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Simple enough. Just install PrismJS <code>npm install --save gatsby-transformer-remark gatsby-remark-prismjs</code></p>\n<p>Add the plugin in your <code>gatsby-config.js</code> like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>    <span class="token punctuation">{</span>\n      resolve<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`gatsby-transformer-remark`</span></span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            resolve<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`gatsby-remark-prismjs`</span></span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              <span class="token comment">// Class prefix for &lt;pre> tags containing syntax highlighting;</span>\n              <span class="token comment">// defaults to \'language-\' (eg &lt;pre class="language-js">).</span>\n              <span class="token comment">// If your site loads Prism into the browser at runtime,</span>\n              <span class="token comment">// (eg for use with libraries like react-live),</span>\n              <span class="token comment">// you may use this to prevent Prism from re-processing syntax.</span>\n              <span class="token comment">// This is an uncommon use-case though;</span>\n              <span class="token comment">// If you\'re unsure, it\'s best to use the default value.</span>\n              classPrefix<span class="token punctuation">:</span> <span class="token string">"language-"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n      </div>\n<p>And require it in <code>src/layouts/index.js</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"prismjs/themes/prism-solarizedlight.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Also, I grabbed some <em>better</em> CSS from a11y dark theme at <a href="https://github.com/PrismJS/prism/blob/gh-pages/themes/prism-okaidia.css">https://github.com/PrismJS/prism/blob/gh-pages/themes/prism-okaidia.css</a></p>\n<h3>GraphQL Search</h3>\n<p>So...I wanted to be able to search my blogs.</p>\n<p>I checked out a gatsby search plugin <a href="https://github.com/andrew-codes/gatsby-plugin-elasticlunr-search">https://github.com/andrew-codes/gatsby-plugin-elasticlunr-search</a>,\nbut i was not able to get it to work quite right. I had actually built a search in a previous react application. I\ndecided it would be easiest to implement that. Plus, I would get to understand the GraphQL querying in gatsby.</p>\n<p>First, I refactored my code from github into this search function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">search</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> searchText <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>searchText<span class="token punctuation">:</span> searchText<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">\'props.data.allMarkdownRemark.edges\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>searchText<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Create the regex search string if not empty</span>\n      <span class="token keyword">var</span> search <span class="token operator">=</span> searchText<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> searchArray <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> searchString <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> searchArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        searchString <span class="token operator">+=</span> <span class="token string">\'(?=.*\'</span> <span class="token operator">+</span> searchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> programSearch <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> reSearch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>searchString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> p<span class="token punctuation">.</span>node<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> reSearch <span class="token punctuation">)</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>node<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> reSearch <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>results<span class="token punctuation">:</span> programSearch<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>results<span class="token punctuation">:</span> posts<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We are just grabbing the search input value, updating the state, creating a regex, and matching that regex in\njavascript\'s filter function. Then we set the results state. (programSearch is actually from the previous usecase, but\nI am lazy).</p>\n<p>The only other thing I did was add a blog limit. I will probably add a load more button eventually (bcuz it is\nstupid easy)</p>',frontmatter:{title:"First blog using gatsby.js",date:"February 22, 2018"}}},pathContext:{slug:"/first-blog-gatsbyjs/",previous:!1,next:!1}}}});
//# sourceMappingURL=path---first-blog-gatsbyjs-f5ae618ee5fa2b05cba3.js.map